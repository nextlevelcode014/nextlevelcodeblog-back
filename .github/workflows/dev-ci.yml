name: CI Dev - Docker Builder

on:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat <<EOF > .env
          SMTP_SERVER=${{ secrets.SMTP_SERVER }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          TEST_EMAIL=${{ secrets.TEST_EMAIL }}
          TEST_NAME=${{ secrets.TEST_NAME }}
          TEST_PASSWORD=${{ secrets.TEST_PASSWORD }}
          TEST_EMAIL_ADMIN=${{ secrets.TEST_EMAIL_ADMIN }}
          TEST_VERIFICATION_TOKEN=${{ secrets.TEST_VERIFICATION_TOKEN }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          JWT_MAXAGE=${{ secrets.JWT_MAXAGE }}
          PORT=${{ secrets.PORT }}
          FRONT_URL=${{ secrets.FRONT_URL }}
          API_ENV=${{ secrets.API_ENV }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          API_KEY=${{ secrets.API_KEY }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build API image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.dev
          tags: api
          push: false
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Start containers
        run: docker compose -f docker-compose-dev.yml up -d

      - name: Run tests
        run: docker exec api cargo test

      - name: Stop containers
        if: always()
        run: docker compose -f docker-compose-dev.yml down
